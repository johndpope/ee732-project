
%% Interpret Results

node_names = {'O1', 'O2', 'P3', 'P4', 'P7', 'P8', 'T7', 'T8', 'C3', ...
    'C4', 'F3', 'F4', 'F7', 'F8'};

nnode = length(node_names);
merge_nodes = [ 3 5;...     % 'P3' + 'P7' => 'PL'
                4 6;...     % 'P4' + 'P8' => 'PR'
                11 13;...   % 'F3' + 'F7' => 'FL'
                12 14];     % 'F4' + 'F8' => 'FR' 
            
node_names_merged = {'O1', 'O2', 'PL', 'PR', 'T7', 'T8', 'C3', 'C4', 'FL', 'FR'};

left_nodes = [1 3 5 7 9];
right_nodes = [2 4 6 8 10];

%%

% mat files generated by main.m
mat_files = {...
    'inter_disleksi_prestim_self_dbmcmc.mat', ...
    'inter_disleksi_poststim_self_dbmcmc.mat', ...
    'inter_disleksi_prestim_dbmcmc.mat', ...
    'inter_disleksi_poststim_dbmcmc.mat', ...
    'inter_kontrol_prestim_self_dbmcmc.mat',  ...
    'inter_kontrol_poststim_self_dbmcmc.mat', ...
    'inter_kontrol_prestim_dbmcmc.mat',  ...
    'inter_kontrol_poststim_dbmcmc.mat', ...
    'inter_disleksi_prestim_self_reveal.mat', ...
    'inter_disleksi_poststim_self_reveal.mat', ...
    'inter_disleksi_prestim_reveal.mat', ...
    'inter_disleksi_poststim_reveal.mat', ...
    'inter_kontrol_prestim_self_reveal.mat',  ...
    'inter_kontrol_poststim_self_reveal.mat', ...
    'inter_kontrol_prestim_reveal.mat',  ...
    'inter_kontrol_poststim_reveal.mat'}; 

labels = {...
    'inter_disleksi_prestim_self_dbmcmc', ...
    'inter_disleksi_poststim_self_dbmcmc', ...
    'inter_disleksi_prestim_dbmcmc', ...
    'inter_disleksi_poststim_dbmcmc', ...
    'inter_kontrol_prestim_self_dbmcmc', ...
    'inter_kontrol_poststim_self_dbmcmc', ...
    'inter_kontrol_prestim_dbmcmc', ...
    'inter_kontrol_poststim_dbmcmc', ...
    'inter_disleksi_prestim_self_reveal', ...
    'inter_disleksi_poststim_self_reveal', ...
    'inter_disleksi_prestim_reveal', ...
    'inter_disleksi_poststim_reveal', ...
    'inter_kontrol_prestim_self_reveal', ...
    'inter_kontrol_poststim_self_reveal', ...
    'inter_kontrol_prestim_reveal', ...
    'inter_kontrol_poststim_reveal'};

gtitles = {...
    'Disleksi Pre-Stimulus Network (DB-MCMC)', ...
    'Disleksi Post-Stimulus Network (DB-MCMC)', ...
    'Disleksi Pre-Stimulus Network (DB-MCMC)', ...
    'Disleksi Post-Stimulus Network (DB-MCMC)', ...
    'Kontrol Pre-Stimulus Network (DB-MCMC)', ...
    'Kontrol Post-Stimulus Network (DB-MCMC)', ...
    'Kontrol Pre-Stimulus Network (DB-MCMC)', ...
    'Kontrol Post-Stimulus Network (DB-MCMC)', ...
    'Disleksi Pre-Stimulus Network (REVEAL)', ...
    'Disleksi Post-Stimulus Network (REVEAL)', ...
    'Disleksi Pre-Stimulus Network (REVEAL)', ...
    'Disleksi Post-Stimulus Network (REVEAL)', ...
    'Kontrol Pre-Stimulus Network (REVEAL)', ...
    'Kontrol Post-Stimulus Network (REVEAL)', ...
    'Kontrol Pre-Stimulus Network (REVEAL)', ...
    'Kontrol Post-Stimulus Network (REVEAL)'};

%% Network plots & Table of Interconnection matrices

resutdir = './Results';
mkdir(resutdir);

for i = 1:length(mat_files)
    
    if ~exist(mat_files{i}, 'file')
        continue;
    end

    S = load(mat_files{i}, 'Results');
    Results = S.Results;

    for j=1:length(Results)
        
        % merge nodes, and generate new interconnection matrices
        for k=1:size(merge_nodes)
            Results{j}.INTERposterior(merge_nodes(k,1), :) = 0.5 * (...
                Results{j}.INTERposterior(merge_nodes(k,1), :) + ...
                Results{j}.INTERposterior(merge_nodes(k,2), :));
            Results{j}.INTERposterior(merge_nodes(k,1), merge_nodes(k,1)) = 1; % self connection
        end
        Results{j}.INTERposterior(merge_nodes(:,2), :) = [];
        Results{j}.INTERposterior(:, merge_nodes(:,2)) = [];
        
        % Generate table of interconnection matrices 
        Inter2FileLR(node_names_merged, Results{j}.INTERposterior, ...
            sprintf('%s/%s_%d_lr.txt', resutdir, labels{i}, j), left_nodes, right_nodes);  

        Inter2File(node_names_merged, Results{j}.INTERposterior, ...
            sprintf('%s/%s_%d.txt', resutdir, labels{i}, j));
        
        inter = Results{j}.INTERposterior;
        inter = inter - diag(diag(inter)); % remove self connections

        SaveGraphFigureLR(inter, node_names_merged, gtitles{i}, ...
            sprintf('%s/%s_%d_graph_l2R.jpg', resutdir, labels{i}, j), ...
            left_nodes, right_nodes);
        close(gcf);
        
        SaveGraphFigure(inter, node_names_merged, gtitles{i}, ...
            sprintf('%s/%s_%d_graph.jpg', resutdir, labels{i}, j));
        close(gcf); 
    end
end

%% Bar plots
 
prvCombineInterConnMatrices; 

% Interconnection weights bar plot
prvGenerateBarPlotsDBMCMC;
prvGenerateBarPlotsReveal;

% Bayesian Network plots 
resutdir = './Results';
mkdir(resutdir);

for i=1:length(field_names)
    
    if(isfield(interconn, field_names{i}))
        interstruct_merged = MergeNodes(merge_nodes, interconn.(field_names{i}));
        N = size(interstruct_merged{1}, 1);
        D = length(interstruct_merged);

        inter = mean(reshape(cell2mat(interstruct_merged), [N N D]),3);
        inter = inter - diag(diag(inter)); % remove self connections

        SaveGraphFigureLR(inter, node_names_merged, gtitles{i}, ...
            sprintf('%s/%s_merged.jpg', resutdir, labels{i}), ...
            left_nodes, right_nodes);
        close(gcf);
    end 
end
